#include <stdio.h>
#include <string.h>


#define TEST_CASES_COUNT (1)
const char * testcases[] =
{
  "+IPD,0,7:ABCDEFG",  
  "+IPD,1,7:ABCDEFG",
  "+IPD,0,10:ABCDEFGHIJ",
  "+IPD,1,10:ABCDEFGHIJ",
  "+IPD,1,10000:ABCDEFGHIJ",
  "+IPD,1,10000:ABCDEFGHIJ",
  "+IPD,7:ABCDEFG",
  "+IPD,7:ABCDEFG",
  "+IPD,10:ABCDEFGHIJ",
  "+IPD,10:ABCDEFGHIJ",
  "+IPD,10000:ABCDEFGHIJ",
  "+IPD,10000:ABCDEFGHIJ",
  
  "+IDDSDSFF"
};

int rx_data(unsigned char byte)
{
    static unsigned char state = 0;
    if (byte == '+') { state = 1; }
    else if (state == 1 && byte == 'I') { state = 2; }
    else if (state == 2 && byte == 'P') { state = 3; }
    else if (state == 3 && byte == 'D') { state = 4; }
    else if (state == 4 && byte == ',') {
      state = 0;
      return 0;
      //handleIPDMessage();  // we received "+IPD,"
    }
    else { state = 0; return -1;}
}

char * getdata(const char * _d)
{
    char * checkIPD = NULL;//strstr(_d, "+IPD,");
    int len = 0;
    char * checkColon = NULL;
    
    //printf("\n\t\t\t\t%s ",strstr(_d, "+IPD,"));
    
    if((checkIPD = strstr(_d, "+IPD,")) != NULL)
    {
       printf("INVALID");
       return NULL;
    }
    else
    {
        printf("VALID");
        const int lenIPD = 5;
        
        char * firstComma = strstr(_d, ",");
        
        checkColon = strstr(_d, ":");
        
        char rawCap[16] = {0};
        
        strncpy(rawCap, _d+5, checkColon-firstComma-1);  // Just to remove first comma 
        
        char * secondComma = strstr(rawCap, ",");
        
        char rawCapLen[16] = {0};
        if( (NULL == secondComma) && (NULL != checkColon) ) //Single-Channel
        {
            strncpy(rawCapLen, rawCap , checkColon-firstComma-1);//checkColon-firstComma-1 );
            //printf("S%d | %s | %s | %s | %s | %s | %u | %u | %u | %s | %d \n",__LINE__
        //, _d , rawCap, firstComma, secondComma, checkColon
        //             , firstComma, secondComma, checkColon, rawCapLen, atoi(rawCapLen));
            
        }
        else if( (NULL != secondComma) && (NULL != checkColon) ) //Multi-Channel
        {
            strncpy(rawCapLen, secondComma+1 , checkColon-firstComma);// secondComma-rawCap ); // errorprintf("%d | %s | %s | %s | %s | %s | %u | %u | %u | %s | %d \n",__LINE__
           // printf("M%d | %s | %s | %s | %s | %s | %u | %u | %u | %u | %s | %d \n",__LINE__
            //, _d , rawCap, firstComma, secondComma, checkColon
            //         , firstComma, secondComma, checkColon, rawCap, rawCapLen, atoi(rawCapLen));
             
        }
        else
        {
            printf("?");
        }
        
        len = atoi(rawCapLen);
        
        //return (_d+len);
        
        
        //char * id = strstr(firstComma, ",");
        
    
        //printf("\t\t%d %s %s %s %s\t\t",strlen(_d) - (int)(checkIPD-_d), firstComma, checkColon, id, rawCap);
        
    
    }
    return (char *)(checkColon+1);//(_d+len);
    //return (char *)_d;
}


char * getdatarun(const char _d)
{
    //static char data[256];
    //static int dataindex;
    char data[256];
    int dataindex;
    
    printf("HELELEL");
    //data[255]=0;
    //memset(data, '0', 255);
    
    char * checkIPD = NULL;//strstr(_d, "+IPD,");
    int len = 0;
    char * checkColon = NULL;
    
    printf("\t%c %s ",_d, data);
    data[dataindex] = _d;
    dataindex = (dataindex + 1) % 256;
    
    
    
    if(!rx_data(_d))//(checkIPD = strstr(data, "+IPD,")) != NULL)
    {
       printf("INVALID");
       return NULL;
    }
    else
    {
        printf("VALID");
        const int lenIPD = 5;
        
        char * firstComma = strstr(data, ",");
        
        checkColon = strstr(data, ":");
        
        char rawCap[16] = {0};
        
        strncpy(rawCap, data+5, checkColon-firstComma-1);  // Just to remove first comma 
        
        char * secondComma = strstr(rawCap, ",");
        
        char rawCapLen[16] = {0};
        if( (NULL == secondComma) && (NULL != checkColon) ) //Single-Channel
        {
            strncpy(rawCapLen, rawCap , checkColon-firstComma-1);//checkColon-firstComma-1 );
            //printf("S%d | %s | %s | %s | %s | %s | %u | %u | %u | %s | %d \n",__LINE__
        //, _d , rawCap, firstComma, secondComma, checkColon
        //             , firstComma, secondComma, checkColon, rawCapLen, atoi(rawCapLen));
            
        }
        else if( (NULL != secondComma) && (NULL != checkColon) ) //Multi-Channel
        {
            strncpy(rawCapLen, secondComma+1 , checkColon-firstComma);// secondComma-rawCap ); // errorprintf("%d | %s | %s | %s | %s | %s | %u | %u | %u | %s | %d \n",__LINE__
           // printf("M%d | %s | %s | %s | %s | %s | %u | %u | %u | %u | %s | %d \n",__LINE__
            //, _d , rawCap, firstComma, secondComma, checkColon
            //         , firstComma, secondComma, checkColon, rawCap, rawCapLen, atoi(rawCapLen));
             
        }
        else
        {
            printf("?");
        }
        
        len = atoi(rawCapLen);
        
        //return (_d+len);
        
        
        //char * id = strstr(firstComma, ",");
        
    
        //printf("\t\t%d %s %s %s %s\t\t",strlen(_d) - (int)(checkIPD-_d), firstComma, checkColon, id, rawCap);
        
    
    }
    return (char *)(checkColon+1);//(_d+len);
    //return (char *)_d;
}

int main()
{
    printf("Hello, World!\nTest cases:\n");

    int i = 0, j = 0 ;
    
    for ( i = 0 ; i < TEST_CASES_COUNT ; i++)
    {
        //getdata(testcases[i]);
        printf("\t%d | %s | \n", i, testcases[i]);
        int len = strlen(testcases[i]);
        for(j = 0 ; j < len ; j++)
            printf("\t\t[%d,%d] %c %s\n", i,j,testcases[i][j] , getdatarun((const char)testcases[i][j]));
        //printf("%s\n",getdatarun(testcases[i]));
    }
    
    return 0;
}

